# Not a successful experiment with getting the scroll area to work.
# This iteration just makes a bunch of tiny buttons that do display the name.
# I have, for now decided to scrub the idea of showing all notes here, more notes is better than no notes.
# I need to re-add my features in and instead of displaying notes in the order created do it backwards from the most
# recent note to the oldest note.

# Will re-add the features in my next iteration main_window_0_0_3_1.py

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ui_0_0_3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from os import getcwd

from database import Database

DB_PATH = f"{getcwd()}\\database.db"

database = Database()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.get_notes()
        self.update = False

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(965, 669)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.note_name = QtWidgets.QLineEdit(self.centralwidget)
        self.note_name.setGeometry(QtCore.QRect(90, 10, 371, 21))
        self.note_name.setObjectName("note_name")
        self.label_note_name = QtWidgets.QLabel(self.centralwidget)
        self.label_note_name.setGeometry(QtCore.QRect(10, 10, 71, 21))
        self.label_note_name.setObjectName("label_note_name")
        self.label_contents = QtWidgets.QLabel(self.centralwidget)
        self.label_contents.setGeometry(QtCore.QRect(10, 30, 81, 31))
        self.label_contents.setObjectName("label_contents")
        self.note_contents = QtWidgets.QTextEdit(self.centralwidget)
        self.note_contents.setGeometry(QtCore.QRect(0, 60, 801, 511))
        self.note_contents.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.note_contents.setObjectName("note_contents")
        self.pushButton_save_note = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_save_note.setGeometry(QtCore.QRect(10, 580, 91, 41))
        self.pushButton_save_note.setObjectName("pushButton_save_note")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(800, 60, 161, 511))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setMinimumSize(QtCore.QSize(0, 100))
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(False)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 142, 509))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.saved_notes = QtWidgets.QVBoxLayout()
        # self.saved_notes = []
        # spacing = 0
        # This shows the most recent notes
        count = len(self.db_notes)
        while count > len(self.db_notes) - 17:
            print(count)
            self.note_button = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
            self.note_button.setText(self.db_notes[count - 1][1])
            self.saved_notes.addWidget(self.note_button)
            count -= 1
        # for num, note in enumerate(self.db_notes):
        #     print(num)
        #     self.note_button = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        #     # self.note_button.setGeometry(QtCore.QRect(0, spacing, 141, 41))
        #     # self.note_button.setObjectName(f"button_{num}")
        #     self.note_button.setText(note[1])
        #     # spacing += 10
        #     self.saved_notes.addWidget(self.note_button)
        #     # self.saved_notes.append(self.note_button)
        #     if num == 12:
        #         break
        self.scrollArea.setLayout(self.saved_notes)
        # print(self.saved_notes)
        # self.pushButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        # self.pushButton.setGeometry(QtCore.QRect(0, 0, 141, 41))
        # self.pushButton.setObjectName("pushButton")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(110, 580, 101, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 965, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_note_name.setText(_translate("MainWindow", "Name:"))
        self.label_contents.setText(_translate("MainWindow", "Contents:"))
        self.pushButton_save_note.setText(_translate("MainWindow", "Save Note"))
        # print(self.db_notes)
        # print(len(self.saved_notes))
        # for num, note in enumerate(self.saved_notes):
        #     note_name = self.db_notes[num][1]
        #     self.saved_notes[num].setText(_translate("MainWindow", note_name))
        self.pushButton_2.setText(_translate("MainWindow", "New Note"))

    def save_button(self):
        print("save_button() called")
        if self.pushButton_save_note.text() == "Save Note":
            new_note_name = self.note_name.text()
            # print(new_note_name)
            new_note_contents = self.note_contents.toPlainText()
            # print(new_note_contents)
            note_to_save = (new_note_name, new_note_contents)
            # print(note_to_save)
            conn = database.create_connection(DB_PATH)
            database.add_note(conn, note_to_save)
            self.get_notes()
            self.retranslateUi(MainWindow)
        else:
            print("Updating note.")
            existing_note_id = self.note_id
            existing_note_name = self.note_name.text()
            existing_note_contents = self.note_contents.toPlainText()
            note_to_edit = (existing_note_name, existing_note_contents, existing_note_id)
            print(note_to_edit)
            conn = database.create_connection(DB_PATH)
            database.edit_note(conn, note_to_edit)
            self.update = False
            self.get_notes()
            self.retranslateUi(MainWindow)

    def new_note(self):
        self.update = False
        self.note_name.setText("New Note")
        self.note_contents.setText("")
        self.retranslateUi(MainWindow)

    def save_button(self):
        print("save_button() called")
        if self.pushButton_save_note.text() == "Save Note":
            new_note_name = self.note_name.text()
            # print(new_note_name)
            new_note_contents = self.note_contents.toPlainText()
            # print(new_note_contents)
            note_to_save = (new_note_name, new_note_contents)
            # print(note_to_save)
            conn = database.create_connection(DB_PATH)
            database.add_note(conn, note_to_save)
            self.get_notes()
            self.retranslateUi(MainWindow)
        else:
            print("Updating note.")
            existing_note_id = self.note_id
            existing_note_name = self.note_name.text()
            existing_note_contents = self.note_contents.toPlainText()
            note_to_edit = (existing_note_name, existing_note_contents, existing_note_id)
            print(note_to_edit)
            conn = database.create_connection(DB_PATH)
            database.edit_note(conn, note_to_edit)
            self.update = False
            self.get_notes()
            self.retranslateUi(MainWindow)

    def new_note(self):
        self.update = False
        self.note_name.setText("New Note")
        self.note_contents.setText("")
        self.retranslateUi(MainWindow)

    def get_notes(self):
        conn = database.create_connection(DB_PATH)
        self.db_notes = database.get_user_notes(conn)
        # query notes to populate into GUI
        # print(self.db_notes)
        self.length_of_notes = len(self.db_notes) - 1
        # return self.db_notes

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
